// 1. Write a MongoDB query to display all the documents in the collection restaurants
db.restaurant.find()

// 2. Write a MongoDB query to display the fields restaurant_id, name, district and cuisine for all the documents in the collection restaurant.
 db.restaurant.find({},{name:1, district:1, cuisine:1} )

// 3.Write a MongoDB query to display the fields restaurant_id, name, district and cuisine, but exclude the field _id for all the documents in the collectionrestaurant.
 db.restaurant.find({},{_id:0 , name:1, district:1, cuisine:1, restaurant_id:1} )

// 4.Write a MongoDB query to display the fields restaurant_id, name, district andzipcode, but exclude the field _id for all the
// documents in the collectionrestaurant.
db.restaurant.find({},{_id:0 , name:1, district:1, zipcode:1, restaurant_id:1} )

// 5.Write a MongoDB query to display all the restaurant which is in the districtBronx.
db.restaurant.find({district: "Bronx"} )

// 6.Write a MongoDB query to display the first 5 restaurant which is in the district Bronx.
db.restaurant.find({district: "Bronx"} ).limit(5)

// 7.Write a MongoDB query to display the next 5 restaurants afterskipping first 5 which are in the district Bronx.
db.restaurant.find({district: "Bronx"} ).skip(5)

// 8.Write a MongoDB query to find the restaurants which locates incoord value less than -95.754168.
db.restaurant.find({"address.coord": {$lt: -73.856077}})

// 9.Write a MongoDB query to find the restaurants that does not prepare any cuisine of 'American' and their grade score more than70 and coord value less than -65.754168.
db.restaurant.find({cuisine: {$ne: "American "}, "grades.score": {$gt: 70}, "address.coord": {$lt: -65.754168}})

// 10. Write a MongoDB query to find the restaurant Id, name, district and cuisine for those restaurants which contains 'Wil' as first three letters for its name.
-db.restaurant.find({name: {$regex: "^Wil"}},{_id:0,restaurant_id:1, name:1, district:1 , cuisine:1}) 

// 11. Write a MongoDB query to find the restaurant Id, name, district and cuisine for those restaurants which contains 'ces' as last three letters for its name.
db.restaurant.find({name: {$regex: "ces$" }},{_id:0, retaurant_id:1, name:1,  district:1, cuisine:1})

// 12. Write a MongoDB query to find the restaurant Id, name, district and cuisine for those restaurants which contains 'Reg' as three letters somewhere in its name.
db.restaurant.find({name: {$regex: 'Reg'}},{_id:0, restaurant_id: 1, name:1, district:1, cuisine:1})

// 13. Write a MongoDB query to find the restaurants which belongs to the district Bronx and prepared either American or Chinese dish.
db.restaurant.find({district:"Bronx",$or: [{cuisine: "American "}, {cuisine: "Chinese"}]})


// 14. Write a MongoDB query to find the restaurant Id, name, district and cuisine for those restaurants which belongs to the district Staten Island or Queens or Bronx or Brooklyn.
db.restaurant.find({district: {$in: ["Queens","Bronx","Staten Island", "Brooklyn"]}},{_id:0, restaurant_id:1, name:1, district:1, cuisine: 1})

// 15. Write a MongoDB query to find the restaurant Id, name, district and cuisine for those restaurants which are not belonging to the district Island or Queens or Bronx or Brooklyn.
db.restaurant.find({district: {$ne: "Bronx", $ne: "Queens", $ne: "Brooklyn", $ne: "Staten Island"}},{_id:0, restaurant_id: 1, name: 1, district:1, cuisine:1})

//16. Write a MongoDB query to find the restaurant Id, name, district and cuisine for those restaurants which achieved a score which is not more than 10.
db.restaurant.find({"grades.score": {$lt: 10}},{_id:0, restaurant_id:1, name:1, district:1, cuisine:1})

// 17.Write a MongoDB query to find the restaurant Id, name, address and geographical location for those restaurants where 2nd element of coord array contains a value which is more than 42 and up to 52.
db.restaurant.find({"address.coord.1": {$gt: 42, $lt: 52}},{_id:0, restaurant_id:1, name:1, address:1})
 	
// 18.	Write a MongoDB query to arrange the name of the restaurants in ascending order along with all the columns.
db.restaurant.find({},{_id:0, name:1}).sort({name: 1})

// 19. Write a MongoDB query to arrange the name of the restaurants in descending order along with all the columns.
db.restaurant.find({},{_id:0, name:1}).sort({name: -1})

// 20.Write a MongoDB query to arrange the name of the cuisine in ascending order and for those same cuisine district should be in descending order.
db.restaurant.find({},{_id:0, cuisine:1, district:1}).sort({cuisine: 1, district: -1})

//  21.Write a MongoDB query to know whether all the addresses contains the street or not.
db.restaurant.find({"address.street": {$ne: null}})

// 22.Write a MongoDB query which will select all documents in the restaurants collection where the coord field value is Double.
db.restaurant.find({"address.coord": {$type: "double"}})

 // 23.Write a MongoDB query to find the restaurant name, district, longitude and latitude and cuisine for those restaurants which contains 'Mad' as first three letters of its name.
db.restaurant.find({name: {$regex: "^Mad", $options: "1" }},{_id:0, name:1, district:1, "address.coord":1, cuisine:1})
